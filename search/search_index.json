{
    "docs": [
        {
            "location": "/", 
            "text": "HSR Notizen\n\n\nSpring Semester 2018\n\n\n\n\nCloud Solutions\n\n\nCompilerbau\n\n\nDeep Learning\n\n\n\n\nLinks\n\n\n\n\nMathJax Syntax\n\n\nMkDocs User-Guide\n\n\nMarkdown Cheatsheet", 
            "title": "Home"
        }, 
        {
            "location": "/#hsr-notizen", 
            "text": "", 
            "title": "HSR Notizen"
        }, 
        {
            "location": "/#spring-semester-2018", 
            "text": "Cloud Solutions  Compilerbau  Deep Learning", 
            "title": "Spring Semester 2018"
        }, 
        {
            "location": "/#links", 
            "text": "MathJax Syntax  MkDocs User-Guide  Markdown Cheatsheet", 
            "title": "Links"
        }, 
        {
            "location": "/playground/", 
            "text": "Markdown Playground\n\n\nDies ist etwas normaler Text mit etwas \nkursiver\n schrift und etwas \nbold\n schrift\n\n\nDieser Text ist \nmarkiert\n, hier sind emojis: \n \n \n\n\n\n\n1\n2\nDies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n  \npublic\n \nclass\n \nTestClass\n()\n \n{\n\n    \nint\n \nvar\n \n=\n \n1\n;\n\n\n    \npublic\n \nmethod\n()\n \n{\n\n\n      \nreturn\n \nvar\n;\n\n\n    \n}\n\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n1\n\n\netwas\n\n\nanderes\n\n\n\n\n\n\n2\n\n\nals\n\n\nhier\n\n\n\n\n\n\n\n\n\n\nNotiz\n\n\nTest Notiz mit etwas Text drin\n\n\n\n\nNote\nKlapp mich auf!\n\n\nDanger\n\n\nGefahr!\n\n\n\n\n\n\nWarning\n\n\nWarnung!\n\n\n\n\n\n\nSummary\n\n\nEine Zusammenfassung\n\n\n\n\n\n\nInfo\n\n\nEine Information\n\n\n\n\n\n\nTip\n\n\nEin Tip\n\n\n\n\n\n\nQuestion\n\n\nEine Frage\n\n\n\n\n\n\nBug\n\n\nEin Bug\n\n\n\n\n\n\nQuote\n\n\nEin Zitat\n\n\n\n\nInline Math: \n x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega} \n\n\n\n\nDisplay Math:\n\n\\sum_{i=0}^n i^2\n\n\n\n\nGruppen mit \n{}\n: \n{10}^5\n\n\n\n\n\n\nA \\rightarrow B \n\n\n\\lim_{x\\to \\infty} \\sin x", 
            "title": "Playground"
        }, 
        {
            "location": "/playground/#markdown-playground", 
            "text": "Dies ist etwas normaler Text mit etwas  kursiver  schrift und etwas  bold  schrift  Dieser Text ist  markiert , hier sind emojis:        1\n2 Dies ist Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text ein Text\nzweite Zeile   1\n2\n3\n4\n5\n6    public   class   TestClass ()   { \n     int   var   =   1 ;       public   method ()   {         return   var ;       }     }       1  2  3      1  etwas  anderes    2  als  hier      Notiz  Test Notiz mit etwas Text drin   Note Klapp mich auf!  Danger  Gefahr!    Warning  Warnung!    Summary  Eine Zusammenfassung    Info  Eine Information    Tip  Ein Tip    Question  Eine Frage    Bug  Ein Bug    Quote  Ein Zitat   Inline Math:   x_i^2 * \\frac{(n^2 * n) - 1}{\\Omega}    Display Math: \\sum_{i=0}^n i^2   Gruppen mit  {} :  {10}^5    A \\rightarrow B   \\lim_{x\\to \\infty} \\sin x", 
            "title": "Markdown Playground"
        }, 
        {
            "location": "/clou/", 
            "text": "Cloud Solutions", 
            "title": "Index"
        }, 
        {
            "location": "/clou/#cloud-solutions", 
            "text": "", 
            "title": "Cloud Solutions"
        }, 
        {
            "location": "/combau/", 
            "text": "Compilerbau", 
            "title": "Index"
        }, 
        {
            "location": "/combau/#compilerbau", 
            "text": "", 
            "title": "Compilerbau"
        }, 
        {
            "location": "/combau/syntax/", 
            "text": "Syntax\n\n\nRappi# Syntax\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\nrappi_sharp \n=\n \n{\nclass_declaration\n}.\n\n\n\nclass_declaration \n=\n \n    \nclass\n \nclass_identifier \n[\n:\n \nclass_identifier\n]\n \n{\n \n{\nfield_declaration\n}\n \n}\n.\n\n\n\n//\n \nnot specified exactly\n,\n \nare numbers allowed\n?\n\n\nclass_identifier \n=\n \nuppercase_letter \n{\nletter\n}.\n\n\n\nuppercase_letter \n=\n \nA\n \n|\n \n.\n.\n \n|\n \nZ\n.\n\n\n\nlowercase_letter \n=\n \na\n \n|\n \n.\n.\n \n|\n \nz\n.\n\n\n\nletter \n=\n \nuppercase_letter \n|\n \nlowercase_letter\n.\n\n\n\nfield_declaration \n=\n \nvariable_declaration \n|\n \nmethod_declaration\n.\n\n\n\nvariable_declaration \n=\n \ntype variable_identifier \n;\n.\n\n\n\ntype \n=\n \n//\n \nTODO\n:\n \ncan be user defined or default type\n\n\n\n//\n \nnot specified exactly\n\n\nvariable_identifier \n=\n \nlowercase_letter \n{\nletter\n}.\n\n\n\nmethod_declaration \n=\n \n    \ntype method_identifier \n(\n \n[\nparameter_list\n]\n \n)\n \n{\n \n{\nstatement\n}\n \n}\n.\n\n\n\n//\n \nTODO separate to class identifier\n?\n\n\nmethod_identifer \n=\n \nclass_identifier\n.\n\n\n\nparameter_list \n=\n \nparameter \n{\n,\n \nparameter\n}.\n\n\n\nparameter \n=\n \ntype variable_identifier\n.\n\n\n\nstatement \n=\n \n      \n;\n\n    \n|\n \nvariable_declaration\n\n    \n|\n \nvariable_assignment\n\n    \n|\n \nif_statement\n\n    \n|\n \nwhile_statement\n\n    \n|\n \nmethod_call\n\n    \n|\n \nreturn_statement\n.\n\n\n\nvariable_assignment \n=\n \nvariable_identifier \n=\n \nexpression \n;\n.\n\n\n\nif_statement \n=\n \n    \nif\n \n(\n \nexpression \n)\n \n{\n \n{\nstatement\n}\n \n}\n \n{\nelse\n \n{\n \n{\nstatement\n}\n \n}\n}.\n\n\n\nwhile_statement \n=\n \n    \nwhile\n \n(\n \nexpression \n)\n \n{\n \n{\nstatement\n}\n \n}\n.\n\n\n\nmethod_call \n=\n \n    \n[\ndesignator \n.\n]\n \nmethod_identifier \n(\n \n[\nargument_list\n]\n \n)\n \n;\n.\n\n\n\nreturn_statement \n=\n \nreturn\n \n[\nexpression\n]\n \n;\n.\n\n\n\nargument_list \n=\n \nexpression \n{\n,\n \nexpression\n}.\n\n\n\nexpression \n=\n\n      \nconstant_value\n\n    \n|\n \ncomparison_expression\n\n    \n|\n \nlogical_expression\n\n\n\n//\n \nTODO\n:\n \nExtend expression definition", 
            "title": "Syntax"
        }, 
        {
            "location": "/combau/syntax/#syntax", 
            "text": "", 
            "title": "Syntax"
        }, 
        {
            "location": "/combau/syntax/#rappi-syntax", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 rappi_sharp  =   { class_declaration }.  class_declaration  =  \n     class   class_identifier  [ :   class_identifier ]   {   { field_declaration }   } .  //   not specified exactly ,   are numbers allowed ?  class_identifier  =   uppercase_letter  { letter }.  uppercase_letter  =   A   |   . .   |   Z .  lowercase_letter  =   a   |   . .   |   z .  letter  =   uppercase_letter  |   lowercase_letter .  field_declaration  =   variable_declaration  |   method_declaration .  variable_declaration  =   type variable_identifier  ; .  type  =   //   TODO :   can be user defined or default type  //   not specified exactly  variable_identifier  =   lowercase_letter  { letter }.  method_declaration  =  \n     type method_identifier  (   [ parameter_list ]   )   {   { statement }   } .  //   TODO separate to class identifier ?  method_identifer  =   class_identifier .  parameter_list  =   parameter  { ,   parameter }.  parameter  =   type variable_identifier .  statement  =  \n       ; \n     |   variable_declaration \n     |   variable_assignment \n     |   if_statement \n     |   while_statement \n     |   method_call \n     |   return_statement .  variable_assignment  =   variable_identifier  =   expression  ; .  if_statement  =  \n     if   (   expression  )   {   { statement }   }   { else   {   { statement }   } }.  while_statement  =  \n     while   (   expression  )   {   { statement }   } .  method_call  =  \n     [ designator  . ]   method_identifier  (   [ argument_list ]   )   ; .  return_statement  =   return   [ expression ]   ; .  argument_list  =   expression  { ,   expression }.  expression  = \n       constant_value \n     |   comparison_expression \n     |   logical_expression  //   TODO :   Extend expression definition", 
            "title": "Rappi# Syntax"
        }, 
        {
            "location": "/dl/", 
            "text": "Deep Learning", 
            "title": "Index"
        }, 
        {
            "location": "/dl/#deep-learning", 
            "text": "", 
            "title": "Deep Learning"
        }
    ]
}